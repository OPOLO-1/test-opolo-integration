/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_MESSAGES_CRYPTO_PB_H_INCLUDED
#define PB_MESSAGES_CRYPTO_PB_H_INCLUDED
#include "pb.h"
/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(1024) CipherKeyValue_value_t;
typedef PB_BYTES_ARRAY_T(16) CipherKeyValue_iv_t;
typedef struct _CipherKeyValue {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_key;
    char key[256];
    bool has_value;
    CipherKeyValue_value_t value;
    bool has_encrypt;
    bool encrypt;
    bool has_ask_on_encrypt;
    bool ask_on_encrypt;
    bool has_ask_on_decrypt;
    bool ask_on_decrypt;
    bool has_iv;
    CipherKeyValue_iv_t iv;
/* @@protoc_insertion_point(struct:CipherKeyValue) */
} CipherKeyValue;

typedef PB_BYTES_ARRAY_T(1024) CipheredKeyValue_value_t;
typedef struct _CipheredKeyValue {
    bool has_value;
    CipheredKeyValue_value_t value;
/* @@protoc_insertion_point(struct:CipheredKeyValue) */
} CipheredKeyValue;

typedef PB_BYTES_ARRAY_T(32) CosiCommit_data_t;
typedef struct _CosiCommit {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_data;
    CosiCommit_data_t data;
/* @@protoc_insertion_point(struct:CosiCommit) */
} CosiCommit;

typedef PB_BYTES_ARRAY_T(32) CosiCommitment_commitment_t;
typedef PB_BYTES_ARRAY_T(32) CosiCommitment_pubkey_t;
typedef struct _CosiCommitment {
    bool has_commitment;
    CosiCommitment_commitment_t commitment;
    bool has_pubkey;
    CosiCommitment_pubkey_t pubkey;
/* @@protoc_insertion_point(struct:CosiCommitment) */
} CosiCommitment;

typedef PB_BYTES_ARRAY_T(32) CosiSign_data_t;
typedef PB_BYTES_ARRAY_T(32) CosiSign_global_commitment_t;
typedef PB_BYTES_ARRAY_T(32) CosiSign_global_pubkey_t;
typedef struct _CosiSign {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_data;
    CosiSign_data_t data;
    bool has_global_commitment;
    CosiSign_global_commitment_t global_commitment;
    bool has_global_pubkey;
    CosiSign_global_pubkey_t global_pubkey;
/* @@protoc_insertion_point(struct:CosiSign) */
} CosiSign;

typedef PB_BYTES_ARRAY_T(32) CosiSignature_signature_t;
typedef struct _CosiSignature {
    bool has_signature;
    CosiSignature_signature_t signature;
/* @@protoc_insertion_point(struct:CosiSignature) */
} CosiSignature;

typedef PB_BYTES_ARRAY_T(65) ECDHSessionKey_session_key_t;
typedef struct _ECDHSessionKey {
    bool has_session_key;
    ECDHSessionKey_session_key_t session_key;
/* @@protoc_insertion_point(struct:ECDHSessionKey) */
} ECDHSessionKey;

typedef struct _IdentityType {
    bool has_proto;
    char proto[9];
    bool has_user;
    char user[64];
    bool has_host;
    char host[64];
    bool has_port;
    char port[6];
    bool has_path;
    char path[256];
    bool has_index;
    uint32_t index;
/* @@protoc_insertion_point(struct:IdentityType) */
} IdentityType;

typedef PB_BYTES_ARRAY_T(33) SignedIdentity_public_key_t;
typedef PB_BYTES_ARRAY_T(65) SignedIdentity_signature_t;
typedef struct _SignedIdentity {
    bool has_address;
    char address[130];
    bool has_public_key;
    SignedIdentity_public_key_t public_key;
    bool has_signature;
    SignedIdentity_signature_t signature;
/* @@protoc_insertion_point(struct:SignedIdentity) */
} SignedIdentity;

typedef PB_BYTES_ARRAY_T(65) GetECDHSessionKey_peer_public_key_t;
typedef struct _GetECDHSessionKey {
    bool has_identity;
    IdentityType identity;
    bool has_peer_public_key;
    GetECDHSessionKey_peer_public_key_t peer_public_key;
    bool has_ecdsa_curve_name;
    char ecdsa_curve_name[32];
/* @@protoc_insertion_point(struct:GetECDHSessionKey) */
} GetECDHSessionKey;

typedef PB_BYTES_ARRAY_T(256) SignIdentity_challenge_hidden_t;
typedef struct _SignIdentity {
    bool has_identity;
    IdentityType identity;
    bool has_challenge_hidden;
    SignIdentity_challenge_hidden_t challenge_hidden;
    bool has_challenge_visual;
    char challenge_visual[256];
    bool has_ecdsa_curve_name;
    char ecdsa_curve_name[32];
/* @@protoc_insertion_point(struct:SignIdentity) */
} SignIdentity;

/* Default values for struct fields */
extern const uint32_t IdentityType_index_default;

/* Initializer values for message structs */
#define CipherKeyValue_init_default              {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, {0, {0}}, false, 0, false, 0, false, 0, false, {0, {0}}}
#define CipheredKeyValue_init_default            {false, {0, {0}}}
#define IdentityType_init_default                {false, "", false, "", false, "", false, "", false, "", false, 0u}
#define SignIdentity_init_default                {false, IdentityType_init_default, false, {0, {0}}, false, "", false, ""}
#define SignedIdentity_init_default              {false, "", false, {0, {0}}, false, {0, {0}}}
#define GetECDHSessionKey_init_default           {false, IdentityType_init_default, false, {0, {0}}, false, ""}
#define ECDHSessionKey_init_default              {false, {0, {0}}}
#define CosiCommit_init_default                  {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}}
#define CosiCommitment_init_default              {false, {0, {0}}, false, {0, {0}}}
#define CosiSign_init_default                    {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define CosiSignature_init_default               {false, {0, {0}}}
#define CipherKeyValue_init_zero                 {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, {0, {0}}, false, 0, false, 0, false, 0, false, {0, {0}}}
#define CipheredKeyValue_init_zero               {false, {0, {0}}}
#define IdentityType_init_zero                   {false, "", false, "", false, "", false, "", false, "", false, 0}
#define SignIdentity_init_zero                   {false, IdentityType_init_zero, false, {0, {0}}, false, "", false, ""}
#define SignedIdentity_init_zero                 {false, "", false, {0, {0}}, false, {0, {0}}}
#define GetECDHSessionKey_init_zero              {false, IdentityType_init_zero, false, {0, {0}}, false, ""}
#define ECDHSessionKey_init_zero                 {false, {0, {0}}}
#define CosiCommit_init_zero                     {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}}
#define CosiCommitment_init_zero                 {false, {0, {0}}, false, {0, {0}}}
#define CosiSign_init_zero                       {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define CosiSignature_init_zero                  {false, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define CipherKeyValue_address_n_tag             1
#define CipherKeyValue_key_tag                   2
#define CipherKeyValue_value_tag                 3
#define CipherKeyValue_encrypt_tag               4
#define CipherKeyValue_ask_on_encrypt_tag        5
#define CipherKeyValue_ask_on_decrypt_tag        6
#define CipherKeyValue_iv_tag                    7
#define CipheredKeyValue_value_tag               1
#define CosiCommit_address_n_tag                 1
#define CosiCommit_data_tag                      2
#define CosiCommitment_commitment_tag            1
#define CosiCommitment_pubkey_tag                2
#define CosiSign_address_n_tag                   1
#define CosiSign_data_tag                        2
#define CosiSign_global_commitment_tag           3
#define CosiSign_global_pubkey_tag               4
#define CosiSignature_signature_tag              1
#define ECDHSessionKey_session_key_tag           1
#define IdentityType_proto_tag                   1
#define IdentityType_user_tag                    2
#define IdentityType_host_tag                    3
#define IdentityType_port_tag                    4
#define IdentityType_path_tag                    5
#define IdentityType_index_tag                   6
#define SignedIdentity_address_tag               1
#define SignedIdentity_public_key_tag            2
#define SignedIdentity_signature_tag             3
#define GetECDHSessionKey_identity_tag           1
#define GetECDHSessionKey_peer_public_key_tag    2
#define GetECDHSessionKey_ecdsa_curve_name_tag   3
#define SignIdentity_identity_tag                1
#define SignIdentity_challenge_hidden_tag        2
#define SignIdentity_challenge_visual_tag        3
#define SignIdentity_ecdsa_curve_name_tag        4

/* Struct field encoding specification for nanopb */
extern const pb_field_t CipherKeyValue_fields[8];
extern const pb_field_t CipheredKeyValue_fields[2];
extern const pb_field_t IdentityType_fields[7];
extern const pb_field_t SignIdentity_fields[5];
extern const pb_field_t SignedIdentity_fields[4];
extern const pb_field_t GetECDHSessionKey_fields[4];
extern const pb_field_t ECDHSessionKey_fields[2];
extern const pb_field_t CosiCommit_fields[3];
extern const pb_field_t CosiCommitment_fields[3];
extern const pb_field_t CosiSign_fields[5];
extern const pb_field_t CosiSignature_fields[2];

/* Maximum encoded size of messages (where known) */
#define CipherKeyValue_size                      1358
#define CipheredKeyValue_size                    1027
#define IdentityType_size                        416
#define SignIdentity_size                        971
#define SignedIdentity_size                      235
#define GetECDHSessionKey_size                   520
#define ECDHSessionKey_size                      67
#define CosiCommit_size                          82
#define CosiCommitment_size                      68
#define CosiSign_size                            150
#define CosiSignature_size                       34

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_CRYPTO_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
